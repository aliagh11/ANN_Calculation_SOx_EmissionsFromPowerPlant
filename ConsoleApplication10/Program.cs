using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication10
{
    class Program
    {
        static void Main(string[] args)
        {

            // *************** weights and bias as an excel file ***************** //

            double[,] weights1 = new double[26, 5] { { -1.658959845, -4.355258731, 0.686451754, -3.610794828, -5.241742935 }, { 2.665393355, 0.110048678, -2.227261491, 0.299256053, 0.254920603 }, 
                                                      {5.223089281, -1.437134408, 0.693742989, 4.483426785, -0.089914032}, {1.741190075, -0.948122349, -3.88169224, -2.732912975, -4.211630013},
                                                      {10.60254237, 9.337603787, 4.446168606, 5.756066616, -5.770456952}, {-0.95481369, -4.835886409, 2.94031881, 0.354426329, -5.592845342},
                                                      {0.590047175, 0.450025676, 0.474687145, -0.397992697, -1.800314942}, {4.797407652, 2.121977209, -1.133980754, 2.967848075, -2.593845071},
                                                      {0.852998759, 5.862536434, -0.081690526, -3.134307061, 2.285804562}, {0.536601609, -1.233651948, -1.566235126, -1.132487235, 3.356885029},
                                                      {-0.198176827, -3.448724115, 4.317263104, -2.588829839, 0.338478062}, {0.028116385, 4.108469653, 10.08889707, -6.107704307, -5.911441695},
                                                      {0.357621571, -3.38344356, 1.261888527, 2.348821816, 1.848848298}, {-0.30374532, -0.645540495, 1.211652812, -0.521672345, 0.222358178},
                                                      {-0.204520256, 3.260814568, -1.59433896, -4.51557261, -3.129930692}, {-4.141179169, -2.266545783, 4.482875048, -2.112176281, -0.635740077},
                                                      {-1.615215474, 0.055830432, -2.187726175, 2.448189417, 1.732491805}, {2.647110086, 4.979277515, -1.897962596, -2.391215884, 2.029938524},
                                                      {1.221272388, 2.043721011, -0.248458337, -1.591531827, -2.695571004}, {0.116663236, 0.924059811, -1.616355368, 0.5906527, -0.53674005},
                                                      {0.659149569, -1.407214137, -2.296542436, -0.292701418, 3.324811209}, {0.542269714, -2.91388264, -2.001477205, -3.841862466, -1.987577135},
                                                      {1.374948957, -0.89482377, 1.514536169, 5.640171191, -13.80749845}, {-0.507325942, 3.404552352, 1.66618209, 3.556057856, 1.795478282},
                                                      {0.349362763, -3.523102413, 1.623305755, -1.900556991, -0.93380326}, {-0.28920465, 2.713318243, -1.789082971, 1.095940233, 0.908633525}};

            double[,] weights2 = new double[1, 26] { { -0.070572771, 0.283631768, 0.983045012, -0.146658372, 0.311681356, -0.14064547, 1.733163686, -0.229217248, -0.339127884, 2.000356254, -0.154007628, 0.146967289, 0.391729385, 3.198646913, -0.216485976, -0.255590391, 0.452776867, -0.417444562, 0.408106565, 2.181889879, -1.403851083, 0.890822954, 0.194071447, 1.004394298, 1.81501013, 2.591974007 } };

            double[,] bias = new double[26, 1] { { 3.180473601 }, { -1.818526971 }, { -5.342518862 }, { -2.141273588 }, { -5.775593461 }, { -1.084445832 }, { -1.00564971 }, { -0.404806538 }, { -5.185217504 }, { 2.368791881 }, { -1.073408902 }, { -1.563921314 }, { -0.656396263 }, { 0.118416358 }, { 4.208544971 }, { -0.507990607 }, { 2.978611492 }, { 4.852068459 }, { 2.346763983 }, { -0.267237792 }, { 3.021932298 }, { 3.149212787 }, { -7.242167715 }, { -2.848588059 }, { -4.246162963 }, { 3.530094958 } };


            // ***************** Input features for SOxGas3 unit ******************** //
            // Generated Power - Gas fuel pressure - Compressor inlet pressure - Compressor outlet Temp. - Gas fuel Temp.

            double a1 ;
            double a2 ;
            double a3 ;
            double a4 ;
            double a5 ;

            List<double> inputs = new List<double>() { a1, a2, a3, a4, a5 };

            // **************************************************************************************** //
            // *****************************  Normalization of input data **************************** //
            // **************************************************************************************** //

            List<double> Min = new List<double>() { 75.8, 23.62, 0.862, 367.3, 7.8 };
            List<double> Max = new List<double>() { 115.3, 25.57, 0.887, 421.1, 30 };

            double[,] normalized_inputs = new double[1, 5];

            for (int i = 1; i <= 5; i++)
            {
                normalized_inputs[0, i - 1] = (((inputs[i - 1] - Min[i - 1]) * 2) / (Max[i - 1] - Min[i - 1])) - 1;
            }

            // ****************************************************************************** //
            // *************************** Transposing input data *************************** //
            // ****************************************************************************** //

            double[,] inputs_tr = new double[5, 1];

            for (int i = 1; i <= 5; i++)
            {
                inputs_tr[i - 1, 0] = normalized_inputs[0, i - 1];
            }

            // ******************************************************************************* //
            // **************************** Calculating results ****************************** //
            // ******************************************************************************* //

            //step1 w1 * input'

            double[,] temp1 = new double[26, 5];

            for (int i = 1; i <= 26; i++)
            {
                for (int j = 1; j <= 5; j++)
                {
                    var value1 = (double)(weights1[i-1, j-1]);
                    double value2 = normalized_inputs[0, j-1];
                    temp1[i - 1, j - 1] = value1 * value2; // temp1 is a (26,5) matrix
                }
            }

            // step 2 : the answer of w(1,1) * input'

            double[,] temp2 = new double[26, 1];

            double summation = 0;

            for (int i = 1; i <= 26; i++)
            {
                for (int j = 1; j <= 5; j++)
                {
                    summation = summation + temp1[i - 1, j - 1];
                }

                temp2[i - 1, 0] = summation; // temp2 is a (26,1) matrix 
                summation = 0;
            }

            //the answer of b(1,1) + w(1,1) * input'
            double[,] temp3 = new double[26, 1];

            double summation2 = 0;

            for (int i = 1; i <= 26; i++)
            {
                var value1 = (double)(bias[i-1, 0]);
                double value2 = temp2[i - 1, 0];

                summation2 = value1 + value2;

                temp3[i - 1, 0] = summation2; // temp3 is a (26,1) matrix > temp3 is the input matrix of sigmoid function
                summation2 = 0;
            }

            // ********************************************************************* //
            // ************************ Sigmoid Function *************************** //
            // ********************************************************************* //

            double[,] tansig = new double[26, 1];

            for (int i = 1; i <= 26; i++)
            {
                tansig[i - 1, 0] = (2 / (1 + Math.Exp(-2 * temp3[i - 1, 0]))) - 1;
            }

            // the output of the sigmoid function is tansig matrix (26 , 1)

            // continue in the formula ...

            double[,] temp4 = new double[26, 1];

            for (int i = 1; i <= 26; i++)
            {
                var value1 = (double)(weights2[0, i-1]);
                double value2 = tansig[i - 1, 0];

                double mul = value1 * value2;

                temp4[i - 1, 0] = mul;
            }

            // temp4 is a (26,1) matrix and must be summed in rows

            double summation3 = 0;

            for (int i = 1; i <= 26; i++)
            {
                summation3 = summation3 + temp4[i - 1, 0]; // summation3 must be summed by final neuron bias
            }

            // final answer

            double FA = summation3 + 0.538751312;

            // ************************************************************************************ //
            // *************************** Denormalization of the result ************************** //
            // ************************************************************************************ //

            double SOxEmission = (((FA + 1) / 2) * (34.86 - 0)) + 0;

        }
    }
}
